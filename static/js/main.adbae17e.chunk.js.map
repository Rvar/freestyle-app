{"version":3,"sources":["home/Home.js","generateur_citation/GenerateurCitation.js","boite_a_idees/BoiteAIdees.js","todo_list/components/Todo.js","todo_list/components/Form.js","todo_list/components/FilterButton.js","todo_list/TodoList.js","fetch_data_from_api/fetchDataFromApi.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","GenerateurCitation","props","context","listItems","require","map","item","className","citation","auteur","state","indexCitation","max","this","length","rand","Math","floor","random","console","log","setState","href","onClick","pickACitation","BoiteAIdees","value","handleChange","bind","handleSubmit","event","target","preventDefault","onSubmit","onChange","type","Todo","id","defaultChecked","completed","htmlFor","name","Form","useState","setName","e","addTask","autoComplete","FilterButton","aria-pressed","TodoList","tasks","setTasks","taskList","task","key","tasksNoun","headingText","newTask","nanoid","role","aria-labelledby","FetchDataFromApi","persons","fontaines","posts","axios","get","then","res","data","records","person","fontaine","fields","voie","post","title","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8NAceA,G,6KATX,OACE,6BACE,wDACA,mF,GANWC,cC+CJC,G,wDA5Cb,WAAYC,EAAOC,GAAU,IAAD,sBACxB,cAAMD,EAAOC,GAEb,IACMC,EADOC,EAAQ,IACEC,KAAI,SAACC,GAAD,OACzB,yBAAKC,UAAU,YAAf,IACID,EAAKE,SADT,IAEE,yBAAKD,UAAU,kBAAf,MAAoCD,EAAKG,YAPrB,OAWxB,EAAKC,MAAQ,CAACF,SAAU,GACVL,UAAWA,EACXQ,cAAe,GAbL,E,4DAiB1B,IAAMC,EAAMC,KAAKH,MAAMP,UAAUW,OAAS,EACtCC,EAAO,EAGX,GACEA,EAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAML,UACtCC,KAAKH,MAAMC,gBAAkBI,GAEtCI,QAAQC,IAAI,SAAWR,GAEvBC,KAAKQ,SAAS,CAACV,cAAeI,IAC9BF,KAAKQ,SAAS,CAAEb,SAAUK,KAAKH,MAAMP,UAAUY,O,+BAGvC,IAAD,OACP,OACE,6BACE,wDACGF,KAAKH,MAAMF,SACd,uBAAGD,UAAU,cAAce,KAAK,IAAIC,QAAS,kBAAM,EAAKC,kBAAxD,sB,GAtCyBzB,c,QCwClB0B,GAzCOrB,EAAQ,I,kDAI5B,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CAACgB,MAAO,0DACrB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,yDAQNE,GACXjB,KAAKQ,SAAS,CAACK,MAAOI,EAAMC,OAAOL,U,mCAGxBI,GAGXA,EAAME,mB,+BAIN,OACE,6BACE,qDACA,0BAAMC,SAAUpB,KAAKgB,cACnB,wCAEE,6BACA,8BAAUH,MAAOb,KAAKH,MAAMgB,MAAOQ,SAAUrB,KAAKc,gBAEpD,6BACA,2BAAOQ,KAAK,SAAST,MAAM,iB,GA/BX3B,c,gBCFX,SAASqC,EAAKnC,GAC3B,OACE,wBAAIM,UAAU,oBACZ,yBAAKA,UAAU,QACb,2BAAO8B,GAAIpC,EAAMoC,GAAIF,KAAK,WAAWG,eAAgBrC,EAAMsC,YAC3D,2BAAOhC,UAAU,aAAaiC,QAASvC,EAAMoC,IAC1CpC,EAAMwC,OAGX,yBAAKlC,UAAU,aACb,4BAAQ4B,KAAK,SAAS5B,UAAU,OAAhC,QACO,0BAAMA,UAAU,mBAAmBN,EAAMwC,OAEhD,4BAAQN,KAAK,SAAS5B,UAAU,mBAAhC,UACS,0BAAMA,UAAU,mBAAmBN,EAAMwC,SCwB3CC,MArCf,SAAczC,GAAQ,IAAD,EAEK0C,mBAAS,IAFd,mBAEZF,EAFY,KAENG,EAFM,KAenB,OACE,0BAAMX,SAZR,SAAsBY,GACpBA,EAAEb,iBACF/B,EAAM6C,QAAQL,GACdG,EAAQ,MAUN,wBAAIrC,UAAU,iBACZ,2BAAOiC,QAAQ,iBAAiBjC,UAAU,aAA1C,2BAIF,2BACE4B,KAAK,OACLE,GAAG,iBACH9B,UAAU,kBACVkC,KAAK,OACLM,aAAa,MACbrB,MAAOe,EACPP,SAlBN,SAAsBW,GACpBD,EAAQC,EAAEd,OAAOL,UAmBf,4BAAQS,KAAK,SAAS5B,UAAU,4BAAhC,SCtBSyC,MAVf,SAAsB/C,GACpB,OACE,4BAAQkC,KAAK,SAAS5B,UAAU,iBAAiB0C,eAAa,QAC5D,0BAAM1C,UAAU,mBAAhB,SACA,sCACA,0BAAMA,UAAU,mBAAhB,Y,eC+CS2C,MA/Cf,SAAkBjD,GAAQ,IAAD,EAEG0C,mBAAS,IAFZ,mBAEhBQ,EAFgB,KAETC,EAFS,KAIjBC,EAAWF,EAAM9C,KAAI,SAAAiD,GAAI,OAC3B,kBAAClB,EAAD,CACIC,GAAIiB,EAAKjB,GACTI,KAAMa,EAAKb,KACXF,UAAWe,EAAKf,UAChBgB,IAAKD,EAAKjB,QAKVmB,EAAgC,IAApBH,EAASvC,OAAe,QAAU,OAC9C2C,EAAW,UAAMJ,EAASvC,OAAf,YAAyB0C,EAAzB,cAOjB,OACE,yBAAKjD,UAAU,uBACb,yCACE,kBAAC,EAAD,CAAMuC,QARZ,SAAiBL,GACf,IAAMiB,EAAU,CAAErB,GAAI,QAAUsB,cAAUlB,KAAMA,EAAMF,WAAW,GACjEa,EAAS,GAAD,mBAAKD,GAAL,CAAYO,QAOlB,yBAAKnD,UAAU,qCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,wBAAI8B,GAAG,gBACJoB,GAEH,wBACEG,KAAK,OACLrD,UAAU,wCACVsD,kBAAgB,gBAEfR,K,iBCKIS,E,4MA9CbpD,MAAQ,CACNqD,QAAS,GACTC,UAAW,GACXC,MAAO,I,kEAGY,IAAD,OAChBC,IAAMC,IAAN,8CACGC,MAAK,SAAAC,GACJ,IAAMN,EAAUM,EAAIC,KACpB,EAAKjD,SAAS,CAAE0C,QAASA,OAG7BG,IAAMC,IAAN,0IACGC,MAAK,SAAAC,GACJ,EAAKhD,SAAS,CAAE2C,UAAWK,EAAIC,KAAKC,aAGxCL,IAAMC,IAAN,gEACGC,MAAK,SAAAC,GACJ,EAAKhD,SAAS,CAAE4C,MAAOI,EAAIC,Y,+BAO/B,OACE,6BACE,2FACA,4BACGzD,KAAKH,MAAMqD,QAAQ1D,KAAI,SAAAmE,GAAM,OAAI,4BAAKA,EAAO/B,UAEhD,kDACA,4BACG5B,KAAKH,MAAMsD,UAAU3D,KAAI,SAAAoE,GAAQ,OAAI,4BAAKA,EAASC,OAAOC,UAE7D,qDACA,4BACG9D,KAAKH,MAAMuD,MAAM5D,KAAI,SAAAuE,GAAI,OAAI,4BAAKA,EAAKC,gB,GAzCrB9E,a,eCsFhB+E,E,kDA/Db,WAAY7E,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKM,UAAU,OACb,kBAAC,IAAD,KACA,yBAAKA,UAAU,QACb,6BACE,4BAAQA,UAAU,cAChB,4BACE,kBAAC,IAAD,CAAMwE,GAAG,KAAT,qBAGH,4BACE,4BACE,kBAAC,IAAD,CAAMA,GAAG,uBAAT,iCAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,wBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,qBAAT,wBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,aAKT,yBAAKxE,UAAU,QACZ,kBAAC,IAAD,4KAIE,kBAAC,IAAD,CAAOyE,KAAK,uBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,eACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,qBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,e,GAtDGjF,aCZEkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,a","file":"static/js/main.adbae17e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2> LA MAISON DU FREESTYLE </h2>\r\n        <p> Toutes les apps sont dans le menu à gauche </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport './generateurCitation.css';\r\n\r\nclass GenerateurCitation extends Component {\r\n\r\n  constructor(props, context) {\r\n      super(props, context);\r\n\r\n      const data = require('./citations.json');\r\n      const listItems = data.map((item) =>\r\n        <div className=\"citation\">\r\n          \"{item.citation}\"\r\n          <div className=\"auteurCitation\"> - {item.auteur}</div>\r\n        </div>\r\n      );\r\n\r\n      this.state = {citation: \"\",\r\n                    listItems: listItems,\r\n                    indexCitation: 0}\r\n    }\r\n\r\n  pickACitation() {\r\n    const max = this.state.listItems.length - 1;\r\n    var rand = 0;\r\n\r\n    //Je fais ça pour pas avoir 2 fois de suite la meme citation\r\n    do {\r\n      rand = Math.floor(Math.random() * Math.floor(max));\r\n    } while (this.state.indexCitation === rand);\r\n\r\n    console.log(\"MAX : \" + max);\r\n\r\n    this.setState({indexCitation: rand });\r\n    this.setState({ citation: this.state.listItems[rand] });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2> GENERATEUR DE CITATION </h2>\r\n          {this.state.citation}\r\n        <a className=\"generateBtn\" href=\"#\" onClick={() => this.pickACitation()}>\r\n          Générer\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenerateurCitation;\r\n","import React, { Component } from \"react\";\r\n\r\nconst writeJsonFile = require('write-json-file');\r\n\r\nclass BoiteAIdees extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'Please write an essay about your favorite DOM element.'};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    //Fonctionne pas (il faut utiliser async)\r\n    //await writeJsonFile('./foo.json', {foo: true});\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2> Boite à idées </h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Essay:\r\n            <br/>\r\n            <textarea value={this.state.value} onChange={this.handleChange} />   \r\n          </label> \r\n          <br/>    \r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default BoiteAIdees;\r\n","import React from \"react\";\r\n\r\nexport default function Todo(props) {\r\n  return (\r\n    <li className=\"todo stack-small\">\r\n      <div className=\"c-cb\">\r\n        <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} />\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          {props.name}\r\n        </label>\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button type=\"button\" className=\"btn\">\r\n          Edit <span className=\"visually-hidden\">{props.name}</span>\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn__danger\">\r\n          Delete <span className=\"visually-hidden\">{props.name}</span>\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\n\r\nfunction Form(props) {\r\n\r\n  const [name, setName] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n  // near the top of the `Form` component\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>all </span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useState } from \"react\";\r\nimport Todo from \"./components/Todo\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport { nanoid } from \"nanoid\";\r\nimport './todoList.css';\r\n\r\nfunction TodoList(props) {\r\n\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const taskList = tasks.map(task => (\r\n      <Todo\r\n          id={task.id}\r\n          name={task.name}\r\n          completed={task.completed}\r\n          key={task.id}\r\n        />\r\n      )\r\n    );\r\n\r\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\r\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n\r\n    function addTask(name) {\r\n      const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n      setTasks([...tasks, newTask]);\r\n    }\r\n\r\n    return (\r\n      <div className=\"todoapp stack-large\">\r\n        <h1>TodoMatic</h1>\r\n          <Form addTask={addTask} />\r\n        <div className=\"filters btn-group stack-exception\">\r\n          <FilterButton />\r\n          <FilterButton />\r\n          <FilterButton />\r\n        </div>\r\n        <h2 id=\"list-heading\">\r\n          {headingText}\r\n        </h2>\r\n        <ul\r\n          role=\"list\"\r\n          className=\"todo-list stack-large stack-exception\"\r\n          aria-labelledby=\"list-heading\"\r\n        >\r\n          {taskList}\r\n        </ul>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\nclass FetchDataFromApi extends Component {\r\n\r\n  state = {\r\n    persons: [],\r\n    fontaines: [],\r\n    posts: []\r\n  }\r\n\r\n  componentDidMount() {\r\n      axios.get(`https://jsonplaceholder.typicode.com/users`)\r\n        .then(res => {\r\n          const persons = res.data;\r\n          this.setState({ persons: persons });\r\n        });\r\n\r\n      axios.get(`https://opendata.paris.fr/api/records/1.0/search/?dataset=fontaines-a-boire&q=&facet=type_objet&facet=modele&facet=commune&facet=dispo`)\r\n        .then(res => {\r\n          this.setState({ fontaines: res.data.records });\r\n        });\r\n\r\n      axios.get(`https://my-json-server.typicode.com/rvar/freestyle-app/posts`)\r\n        .then(res => {\r\n          this.setState({ posts: res.data });\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h3> Fetch data with axios from : jsonplaceholder.typicode.com/</h3>\r\n          <ul>\r\n            {this.state.persons.map(person => <li>{person.name}</li>)}\r\n          </ul>\r\n          <h3>Fontaines de Paris</h3>\r\n          <ul>\r\n            {this.state.fontaines.map(fontaine => <li>{fontaine.fields.voie}</li>)}\r\n          </ul>\r\n          <h3>Posts from jsonServer</h3>\r\n          <ul>\r\n            {this.state.posts.map(post => <li>{post.title}</li>)}\r\n          </ul>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default FetchDataFromApi;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Home from './home/Home';\r\nimport GenerateurCitation from './generateur_citation/GenerateurCitation';\r\nimport BoiteAIdee from './boite_a_idees/BoiteAIdees';\r\nimport TodoList from './todo_list/TodoList';\r\nimport FetchDataFromApi from './fetch_data_from_api/fetchDataFromApi.js';\r\n//!!!!!!!!!!!!!!\r\n//AJOUTER IMPORT\r\n//!!!!!!!!!!!!!!\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n/*const DATATODO = [\r\n  { id: \"todo-0\", name: \"Eat\", completed: true },\r\n  { id: \"todo-1\", name: \"Rupture\", completed: false },\r\n  { id: \"todo-2\", name: \"Evenement\", completed: false }\r\n];*/\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n        <div className=\"menu\">\r\n          <div>\r\n            <header className=\"App-header\">\r\n              <h5>\r\n                <Link to=\"/\">FREESTYLE - APP</Link>\r\n              </h5>\r\n            </header>\r\n             <ul>\r\n               <li>\r\n                 <Link to=\"/generateurCitation\">Générateur de citation</Link>\r\n               </li>\r\n               <li>\r\n                 <Link to=\"/boiteAIdee\">Boite à idées</Link>\r\n               </li>\r\n               <li>\r\n                 <Link to=\"/todoList\">Todo list</Link>\r\n               </li>\r\n               <li>\r\n                 <Link to=\"/fetchDataFromApi\">Fetch Data From API</Link>\r\n               </li>\r\n               <li>\r\n                 <Link to=\"/\">autre</Link>\r\n               </li>\r\n             </ul>\r\n           </div>\r\n        </div>\r\n        <div className=\"body\">\r\n           <Switch>\r\n             //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n             //AJOUTER ROUTE ET LINK : Link to... (au dessus)\r\n             //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n             <Route path=\"/generateurCitation\">\r\n               <GenerateurCitation />\r\n             </Route>\r\n             <Route path=\"/boiteAIdee\">\r\n               <BoiteAIdee />\r\n             </Route>\r\n             <Route path=\"/todoList\">\r\n               <TodoList /*tasks={DATATODO}*//>\r\n             </Route>\r\n             <Route path=\"/fetchDataFromApi\">\r\n               <FetchDataFromApi />\r\n             </Route>\r\n             <Route path=\"/\">\r\n               <Home />\r\n             </Route>\r\n           </Switch>\r\n         </div>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}