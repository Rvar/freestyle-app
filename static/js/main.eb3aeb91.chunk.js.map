{"version":3,"sources":["home/Home.js","generateur_citation/GenerateurCitation.js","boite_a_idees/BoiteAIdees.js","todo_list/components/Todo.js","todo_list/components/Form.js","todo_list/components/FilterButton.js","todo_list/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","GenerateurCitation","props","context","listItems","require","map","item","className","citation","auteur","state","indexCitation","max","this","length","rand","Math","floor","random","console","log","setState","href","onClick","pickACitation","BoiteAIdees","value","handleChange","bind","handleSubmit","event","target","preventDefault","onSubmit","onChange","type","Todo","id","defaultChecked","completed","htmlFor","name","Form","addTask","autoComplete","FilterButton","aria-pressed","alert","TodoList","taskList","tasks","task","key","role","aria-labelledby","DATATODO","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb3aeb91.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Home extends Component {\n\n  render() {\n    return (\n      <div>\n        <h2> LA MAISON DU FREESTYLE </h2>\n        <p> Toutes les apps sont dans le menu à gauche </p>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport './generateurCitation.css';\n\nclass GenerateurCitation extends Component {\n\n  constructor(props, context) {\n      super(props, context);\n\n      const data = require('./citations.json');\n      const listItems = data.map((item) =>\n        <div className=\"citation\">\n          \"{item.citation}\"\n          <div className=\"auteurCitation\"> - {item.auteur}</div>\n        </div>\n      );\n\n      this.state = {citation: \"\",\n                    listItems: listItems,\n                    indexCitation: 0}\n    }\n\n  pickACitation() {\n    const max = this.state.listItems.length - 1;\n    var rand = 0;\n\n    //Je fais ça pour pas avoir 2 fois de suite la meme citation\n    do {\n      rand = Math.floor(Math.random() * Math.floor(max));\n    } while (this.state.indexCitation === rand);\n\n    console.log(\"MAX : \" + max);\n\n    this.setState({indexCitation: rand });\n    this.setState({ citation: this.state.listItems[rand] });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2> GENERATEUR DE CITATION </h2>\n          {this.state.citation}\n        <a className=\"generateBtn\" href=\"#\" onClick={() => this.pickACitation()}>\n          Générer\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default GenerateurCitation;\n","import React, { Component } from \"react\";\n\nconst writeJsonFile = require('write-json-file');\n\nclass BoiteAIdees extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {value: 'Please write an essay about your favorite DOM element.'};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    //Fonctionne pas (il faut utiliser async)\n    //await writeJsonFile('./foo.json', {foo: true});\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2> Boite à idées </h2>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Essay:\n            <br/>\n            <textarea value={this.state.value} onChange={this.handleChange} />   \n          </label> \n          <br/>    \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default BoiteAIdees;\n","import React from \"react\";\n\nexport default function Todo(props) {\n  return (\n    <li className=\"todo stack-small\">\n      <div className=\"c-cb\">\n        <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.name}\n        </label>\n      </div>\n      <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn\">\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n        <button type=\"button\" className=\"btn btn__danger\">\n          Delete <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n      </div>\n    </li>\n  );\n}\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n    constructor(props) {\n      super(props);\n      this.props = props;\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit() {\n      this.props.addTask(\"Say hello!\");\n    }\n\n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <h2 className=\"label-wrapper\">\n            <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n              What needs to be done?\n            </label>\n          </h2>\n          <input\n            type=\"text\"\n            id=\"new-todo-input\"\n            className=\"input input__lg\"\n            name=\"text\"\n            autoComplete=\"off\"\n          />\n          <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n            Add\n          </button>\n        </form>\n      );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\n      <span className=\"visually-hidden\">Show </span>\n      <span>all </span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n\nexport default FilterButton;\n","import React, { Component } from \"react\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport './todoList.css';\n\n\nfunction addTask(name) {\n  alert(name);\n}\n\n\nclass TodoList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.taskList = props.tasks.map(task =>\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n      />);\n  }\n\n  render() {\n    return (\n      <div className=\"todoapp stack-large\">\n        <h1>TodoMatic</h1>\n          <Form addTask={addTask} />\n        <div className=\"filters btn-group stack-exception\">\n          <FilterButton />\n          <FilterButton />\n          <FilterButton />\n        </div>\n        <h2 id=\"list-heading\">\n          3 tasks remaining\n        </h2>\n        <ul\n          role=\"list\"\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\"\n        >\n          {this.taskList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './home/Home';\nimport GenerateurCitation from './generateur_citation/GenerateurCitation';\nimport BoiteAIdee from './boite_a_idees/BoiteAIdees';\nimport TodoList from './todo_list/TodoList';\n//!!!!!!!!!!!!!!\n//AJOUTER IMPORT\n//!!!!!!!!!!!!!!\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst DATATODO = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Rupture\", completed: false },\n  { id: \"todo-2\", name: \"Evenement\", completed: false }\n];\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n        <div className=\"menu\">\n          <div>\n            <header className=\"App-header\">\n              <h5>\n                <Link to=\"/\">FREESTYLE - APP</Link>\n              </h5>\n            </header>\n             <ul>\n               <li>\n                 <Link to=\"/generateurCitation\">Générateur de citation</Link>\n               </li>\n               <li>\n                 <Link to=\"/boiteAIdee\">Boite à idées</Link>\n               </li>\n               <li>\n                 <Link to=\"/todoList\">Todo list</Link>\n               </li>\n               <li>\n                 <Link to=\"/\">autre</Link>\n               </li>\n             </ul>\n           </div>\n        </div>\n        <div className=\"body\">\n           <Switch>\n             //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n             //AJOUTER ROUTE ET LINK : Link to... (au dessus)\n             //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n             <Route path=\"/generateurCitation\">\n               <GenerateurCitation />\n             </Route>\n             <Route path=\"/boiteAIdee\">\n               <BoiteAIdee />\n             </Route>\n             <Route path=\"/todoList\">\n               <TodoList tasks={DATATODO}/>\n             </Route>\n             <Route path=\"/\">\n               <Home />\n             </Route>\n           </Switch>\n         </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}